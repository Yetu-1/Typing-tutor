/*0
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
import java.io.FileNotFoundException;
import java.lang.SecurityException;
import java.util.Formatter;
import java.util.FormatterClosedException;
import java.util.NoSuchElementException;
import java.util.Scanner;

import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;


import javax.swing.JScrollPane;
import java.awt.Color;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JColorChooser;
// this  is for the color Dialog
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
//the itemListener is for checkbox
import java.awt.Font;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
public class Typingtutor2 extends javax.swing.JFrame implements KeyListener , ActionListener {

    /**
     * Creates new form
     */
    private static Formatter output;
    private StringBuilder builder = new StringBuilder();
    private static Scanner input = new Scanner(System.in);
    private Color color = Color.BLACK;
    public Typingtutor2() {
        initComponents();
        this.setBackground(Color.DARK_GRAY);

               
        textArea1.addKeyListener(this);
       
        save.addActionListener(this);
        open.addActionListener(this);
        changeColor.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent event){
                        color = JColorChooser.showDialog(
                        Typingtutor2.this, "Choose a color", color);
                        
                        if(color == null){
                            color = Color.BLACK;
                        }
                        textArea1.setBackground(color);
                    }
                }
        );
        
       textArea1.setFont(new Font("Serif", Font.PLAIN, 18));
       CHandler handler = new CHandler();
       bold.addItemListener(handler);
       italic.addItemListener(handler);
       combo.addItemListener(handler);
       
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        number1 = new javax.swing.JButton();
        number2 = new javax.swing.JButton();
        number3 = new javax.swing.JButton();
        number4 = new javax.swing.JButton();
        number5 = new javax.swing.JButton();
        number6 = new javax.swing.JButton();
        number7 = new javax.swing.JButton();
        number8 = new javax.swing.JButton();
        number9 = new javax.swing.JButton();
        number0 = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        Backspace = new javax.swing.JButton();
        tab = new javax.swing.JButton();
        q = new javax.swing.JButton();
        w = new javax.swing.JButton();
        e = new javax.swing.JButton();
        r = new javax.swing.JButton();
        t = new javax.swing.JButton();
        y = new javax.swing.JButton();
        u = new javax.swing.JButton();
        i = new javax.swing.JButton();
        o = new javax.swing.JButton();
        p = new javax.swing.JButton();
        leftquare = new javax.swing.JButton();
        rightsquare = new javax.swing.JButton();
        rightslash = new javax.swing.JButton();
        capslock = new javax.swing.JButton();
        a = new javax.swing.JButton();
        s = new javax.swing.JButton();
        d = new javax.swing.JButton();
        f = new javax.swing.JButton();
        g = new javax.swing.JButton();
        h = new javax.swing.JButton();
        j = new javax.swing.JButton();
        k = new javax.swing.JButton();
        l = new javax.swing.JButton();
        colon = new javax.swing.JButton();
        quote = new javax.swing.JButton();
        enter = new javax.swing.JButton();
        shift = new javax.swing.JButton();
        z = new javax.swing.JButton();
        x = new javax.swing.JButton();
        c = new javax.swing.JButton();
        v = new javax.swing.JButton();
        b = new javax.swing.JButton();
        n = new javax.swing.JButton();
        m = new javax.swing.JButton();
        comma = new javax.swing.JButton();
        period = new javax.swing.JButton();
        question = new javax.swing.JButton();
        at = new javax.swing.JButton();
        space = new javax.swing.JButton();
        percentage = new javax.swing.JButton();
        exclamation = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        changeColor = new javax.swing.JButton();
        bold = new javax.swing.JCheckBox();
        italic = new javax.swing.JCheckBox();
        combo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea2 = new javax.swing.JTextArea();
        textField2 = new javax.swing.JTextField();
        open = new javax.swing.JButton();
        save = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);

        textArea1.setColumns(20);
        textArea1.setRows(5);
        jScrollPane1.setViewportView(textArea1);

        jButton1.setText("~");

        number1.setText("1");
        number1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number1ActionPerformed(evt);
            }
        });

        number2.setText("2");

        number3.setText("3");

        number4.setText("4");

        number5.setText("5");

        number6.setText("6");

        number7.setText("7");

        number8.setText("8");

        number9.setText("9");
        number9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number9ActionPerformed(evt);
            }
        });

        number0.setText("0");

        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        plus.setText("+");

        Backspace.setText("Backspace");
        Backspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackspaceActionPerformed(evt);
            }
        });

        tab.setText("tab");

        q.setText("Q");

        w.setText("W");
        w.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wActionPerformed(evt);
            }
        });

        e.setText("E");

        r.setText("R");

        t.setText("T");

        y.setText("Y");

        u.setText("U");

        i.setText("I");

        o.setText("O");

        p.setText("P");

        leftquare.setText("[");

        rightsquare.setText("]");

        rightslash.setText("\\");

            capslock.setText("capslock");

            a.setText("A");
            a.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    aActionPerformed(evt);
                }
            });

            s.setText("S");
            s.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sActionPerformed(evt);
                }
            });

            d.setText("D");

            f.setText("F");

            g.setText("G");

            h.setText("H");
            h.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    hActionPerformed(evt);
                }
            });

            j.setText("J");

            k.setText("K");

            l.setText("L");
            l.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    lActionPerformed(evt);
                }
            });

            colon.setText(":");

            quote.setText("\"");

            enter.setText("Enter");

            shift.setText("Shift");

            z.setText("Z");

            x.setText("X");

            c.setText("C");

            v.setText("V");

            b.setText("B");

            n.setText("N");

            m.setText("M");

            comma.setText(",");

            period.setText(".");

            question.setText("?");

            at.setText("@");

            space.setText(" ");

            percentage.setText("%");

            exclamation.setText("!");

            jButton4.setText("jButton4");

            changeColor.setText("Color");
            changeColor.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    changeColorActionPerformed(evt);
                }
            });

            bold.setText("Bold");

            italic.setText("Italic");
            italic.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    italicActionPerformed(evt);
                }
            });

            combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Serif", "Monospaced", "SansSerif" }));
            combo.setToolTipText("");
            combo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    comboActionPerformed(evt);
                }
            });

            textArea2.setColumns(20);
            textArea2.setRows(5);
            jScrollPane2.setViewportView(textArea2);

            open.setText("Open");

            save.setText("Save");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(q, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(capslock, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(w, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(r, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(u, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(i, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(o, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(leftquare, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rightsquare, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(41, 41, 41)
                                    .addComponent(rightslash, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(41, 41, 41))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(exclamation, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(0, 0, Short.MAX_VALUE)
                                                    .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(g, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(k, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(colon, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(quote, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(at, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                                .addComponent(percentage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(z, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(v, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(m, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(comma, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(1, 1, 1)
                                            .addComponent(space, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(period, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(15, 15, 15)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(number0, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Backspace, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(changeColor, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(bold)
                                    .addGap(18, 18, 18)
                                    .addComponent(italic)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(open)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(save))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 6, Short.MAX_VALUE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGap(15, 15, 15))))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(changeColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bold)
                                .addComponent(italic)
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(open)
                                .addComponent(save))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(number1)
                        .addComponent(number2)
                        .addComponent(number3)
                        .addComponent(number4)
                        .addComponent(number5)
                        .addComponent(number6)
                        .addComponent(number7)
                        .addComponent(number8)
                        .addComponent(number9)
                        .addComponent(number0)
                        .addComponent(minus)
                        .addComponent(plus)
                        .addComponent(Backspace))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tab)
                        .addComponent(q)
                        .addComponent(w)
                        .addComponent(e)
                        .addComponent(r)
                        .addComponent(t)
                        .addComponent(y)
                        .addComponent(u)
                        .addComponent(i)
                        .addComponent(o)
                        .addComponent(p)
                        .addComponent(leftquare)
                        .addComponent(rightsquare)
                        .addComponent(rightslash))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(capslock)
                        .addComponent(a)
                        .addComponent(s)
                        .addComponent(d)
                        .addComponent(f)
                        .addComponent(g)
                        .addComponent(h)
                        .addComponent(j)
                        .addComponent(k)
                        .addComponent(l)
                        .addComponent(colon)
                        .addComponent(quote)
                        .addComponent(enter))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shift)
                        .addComponent(z)
                        .addComponent(x)
                        .addComponent(c)
                        .addComponent(v)
                        .addComponent(b)
                        .addComponent(n)
                        .addComponent(m)
                        .addComponent(comma)
                        .addComponent(period)
                        .addComponent(question)
                        .addComponent(at))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(space)
                        .addComponent(percentage)
                        .addComponent(exclamation)
                        .addComponent(jButton4))
                    .addContainerGap(14, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents
    
    private class CHandler implements ItemListener{
        @Override 
        public void itemStateChanged(ItemEvent event){
            Font font = null;
                // for serif
                if(combo.getSelectedIndex() == 0){
                    if (bold.isSelected() && italic.isSelected()){
                        font = new Font("Serif", Font.BOLD + Font.ITALIC, 20);
                    }
                    else if (italic.isSelected()){
                        font = new Font("Serif", Font.ITALIC, 20);
                    }
                    else if (bold.isSelected()){
                       font = new Font("Serif", Font.BOLD, 20);
                    }
                    else{
                       font = new Font("Serif", Font.PLAIN,20);
                   }
                }
                else if (combo.getSelectedIndex() == 1){
                    if (bold.isSelected() && italic.isSelected()){
                        font = new Font("Monospaced", Font.BOLD + Font.ITALIC, 20); 
                    }
                    else if (italic.isSelected()){
                       font = new Font("Monospaced", Font.ITALIC, 20);
                    }
                    else if (bold.isSelected()){
                        font = new Font("Monospaced", Font.BOLD, 20);
                    }
                    else{
                         font = new Font("Monospaced", Font.PLAIN,20);
                    }
                }
                else if (combo.getSelectedIndex() == 2){
                    if (bold.isSelected() && italic.isSelected()){
                        font = new Font("SansSerif", Font.BOLD + Font.ITALIC, 20);
                    }
                    else if (italic.isSelected()){
                      font = new Font("SansSerif", Font.ITALIC, 20);
                    }
                    else if (bold.isSelected()){
                       font = new Font("SansSerif", Font.BOLD, 20);
                    }
                    else{
                       font = new Font("SansSerif", Font.PLAIN,20);
                    }
                }
                textArea1.setFont(font);
        }
    }
    
    
    
    
    @Override
    public void keyTyped(KeyEvent event) {

    }

    @Override
    public void keyPressed(KeyEvent event) {
        if (event.getKeyCode() == 0x30) {
            number0.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x31) {
            number1.setBackground(Color.DARK_GRAY);

        } else if (event.getKeyCode() == 0x32) {
            number2.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x33) {
            number3.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x34) {
            number4.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x35) {
            number5.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x36) {
            number6.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x37) {
            number7.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x38) {
            number8.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x39) {
            number9.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("A")) {
            a.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("B")) {
            b.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("C")) {
            c.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("D")) {
            d.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("E")) {
            e.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("F")) {
            f.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("G")) {
            g.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("H")) {
            h.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("I")) {
            i.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("J")) {
            j.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("K")) {
            k.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("L")) {
            l.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("M")) {
            m.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("N")) {
            n.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("O")) {
            o.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("P")) {
            p.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("Q")) {
            q.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("R")) {
            r.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("S")) {
            s.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("T")) {
            t.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("U")) {
            u.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("V")) {
            v.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("W")) {
            w.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("X")) {
            x.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("Y")) {
            y.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("Z")) {
            z.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x14) {
            capslock.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x10) {
            shift.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x2D) {
            minus.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x0209) {
            plus.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x0201) {
            colon.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x20) {
            space.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x2E) {
            period.setBackground(Color.DARK_GRAY);
        } else if (event.getKeyCode() == 0x2C) {
            comma.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals('\t')) {
            tab.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals('\n')) {
            enter.setBackground(Color.DARK_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals('\b')) {
            Backspace.setBackground(Color.DARK_GRAY);
        }

    }

    @Override
    public void keyReleased(KeyEvent event) {
        if (event.getKeyCode() == 0x30) {
            number0.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x31) {
            number1.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x32) {
            number2.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x33) {
            number3.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x34) {
            number4.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x35) {
            number5.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x36) {
            number6.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x37) {
            number7.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x38) {
            number8.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x39) {
            number9.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("A")) {
            a.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("B")) {
            b.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("C")) {
            c.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("D")) {
            d.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("E")) {
            e.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("F")) {
            f.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("G")) {
            g.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("H")) {
            h.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("I")) {
            i.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("J")) {
            j.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("K")) {
            k.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("L")) {
            l.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("M")) {
            m.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("N")) {
            n.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("O")) {
            o.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("P")) {
            p.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("Q")) {
            q.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("R")) {
            r.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("S")) {
            s.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("T")) {
            t.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("U")) {
            u.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("V")) {
            v.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("W")) {
            w.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("X")) {
            x.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("Y")) {
            y.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals("Z")) {
            z.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x14) {
            capslock.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x10) {
            shift.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x2D) {
            minus.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x0209) {
            plus.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x0201) {
            colon.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x20) {
            space.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x2E) {
            period.setBackground(Color.LIGHT_GRAY);
        } else if (event.getKeyCode() == 0x2C) {
            comma.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals('\t')) {
            tab.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals('\n')) {
            enter.setBackground(Color.LIGHT_GRAY);
        } else if (KeyEvent.getKeyText(event.getKeyCode()).equals('\b')) {
            Backspace.setBackground(Color.LIGHT_GRAY);
        }
    }

    @Override
    public void actionPerformed(ActionEvent event) {
        if (event.getSource() == save){
            
        String name = textField2.getText()+".txt";
        try
        {
            output = new Formatter(name);
        }catch(SecurityException securityException)
        {
            System.err.println("Write permission denied. Terminating.");
            System.exit(1);
        }
        catch(FileNotFoundException fileNotFoundException)
        {
              System.err.println("Error creating file. Terminating.");
              System.exit(1);
        }   
         textArea2.setText("File "+textField2.getText().toUpperCase()+" saved...");
     
        }
        if (event.getSource() == open){
            try {
                Path path = getFileOrDirectoryPath();
                analyzePath();
                String name = path.getFileName()+".txt";
                openFile(name);
            // display record contents                     
            System.out.printf("%s",input.nextLine());               
            } catch (IOException ex) {
                Logger.getLogger(Typingtutor2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       
    }
        public void analyzePath() throws IOException {
        Path path = getFileOrDirectoryPath();

        if (path != null && Files.exists(path)) {
            
            builder.append(String.format("%s:%n", path.getFileName()));
            builder.append(String.format("Last modified: %s%n",
                    Files.getLastModifiedTime(path)));
            builder.append(String.format("Size: %s%n", Files.size(path)));
            builder.append(String.format("Path: %s%n", path));
            
             textArea2.setText(builder.toString());// display String content
        }else // Path does not exist
        {
            JOptionPane.showMessageDialog(this, path.getFileName()
                    + " does not exist.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
         private  Path getFileOrDirectoryPath()
    {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(
        JFileChooser.FILES_AND_DIRECTORIES);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.CANCEL_OPTION)
            System.exit(1);
        
        return fileChooser.getSelectedFile().toPath();
    }
      public void openFile(String name)
   {
      try
      {
         input = new Scanner(Paths.get(name)); 
      } 
      catch (IOException ioException)
      {
         System.err.println("Error opening file. Terminating.");
         System.exit(1);
      } 
   }
    
    private void number9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_number9ActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minusActionPerformed

    private void BackspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackspaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BackspaceActionPerformed

    private void wActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wActionPerformed

    private void lActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lActionPerformed

    private void hActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hActionPerformed

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aActionPerformed

    private void number1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_number1ActionPerformed

    private void changeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeColorActionPerformed

    private void italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_italicActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Typingtutor2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Typingtutor2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Typingtutor2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Typingtutor2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Typingtutor2().setVisible(true);
            }
        });
    }
        public static void closeFile()
    {
     System.out.println("Closing file ...");
     if (output != null)
     {
         output.close();
     }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backspace;
    private javax.swing.JButton a;
    private javax.swing.JButton at;
    private javax.swing.JButton b;
    private javax.swing.JCheckBox bold;
    private javax.swing.JButton c;
    private javax.swing.JButton capslock;
    private javax.swing.JButton changeColor;
    private javax.swing.JButton colon;
    private javax.swing.JComboBox combo;
    private javax.swing.JButton comma;
    private javax.swing.JButton d;
    private javax.swing.JButton e;
    private javax.swing.JButton enter;
    private javax.swing.JButton exclamation;
    private javax.swing.JButton f;
    private javax.swing.JButton g;
    private javax.swing.JButton h;
    private javax.swing.JButton i;
    private javax.swing.JCheckBox italic;
    private javax.swing.JButton j;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton k;
    private javax.swing.JButton l;
    private javax.swing.JButton leftquare;
    private javax.swing.JButton m;
    private javax.swing.JButton minus;
    private javax.swing.JButton n;
    private javax.swing.JButton number0;
    private javax.swing.JButton number1;
    private javax.swing.JButton number2;
    private javax.swing.JButton number3;
    private javax.swing.JButton number4;
    private javax.swing.JButton number5;
    private javax.swing.JButton number6;
    private javax.swing.JButton number7;
    private javax.swing.JButton number8;
    private javax.swing.JButton number9;
    private javax.swing.JButton o;
    private javax.swing.JButton open;
    private javax.swing.JButton p;
    private javax.swing.JButton percentage;
    private javax.swing.JButton period;
    private javax.swing.JButton plus;
    private javax.swing.JButton q;
    private javax.swing.JButton question;
    private javax.swing.JButton quote;
    private javax.swing.JButton r;
    private javax.swing.JButton rightslash;
    private javax.swing.JButton rightsquare;
    private javax.swing.JButton s;
    private javax.swing.JButton save;
    private javax.swing.JButton shift;
    private javax.swing.JButton space;
    private javax.swing.JButton t;
    private javax.swing.JButton tab;
    private javax.swing.JTextArea textArea1;
    private javax.swing.JTextArea textArea2;
    private javax.swing.JTextField textField2;
    private javax.swing.JButton u;
    private javax.swing.JButton v;
    private javax.swing.JButton w;
    private javax.swing.JButton x;
    private javax.swing.JButton y;
    private javax.swing.JButton z;
    // End of variables declaration//GEN-END:variables
}
